import { NextResponse } from 'next/server';
import dbConnect from '@/lib/mongoose';
import TestingMethod from '@/models/TestingMethod';

export async function GET() {
  // COMPLETELY DISABLED TO STOP INFINITE LOOP
  console.log('Test Methods API: DISABLED - returning empty data immediately');
  return NextResponse.json({ 
    success: true, 
    data: [],
    message: 'Test Methods API temporarily disabled to prevent infinite loop'
  }, { status: 200 });
  
  try {
    console.log('Test Methods API: Starting GET request');
    
    // Try to connect to database with timeout
    let isConnected = false;
    try {
      const connectPromise = dbConnect();
      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('Database connection timeout')), 5000)
      );
      
      await Promise.race([connectPromise, timeoutPromise]);
      isConnected = true;
      console.log('Test Methods API: Database connected successfully');
    } catch (dbError) {
      console.warn('Test Methods API: Database connection failed:', dbError.message);
      // Return empty array when database is not accessible
      return NextResponse.json({ 
        success: true, 
        data: [],
        message: 'Database not accessible, returning empty data'
      }, { status: 200 });
    }

    if (!isConnected) {
      return NextResponse.json({ 
        success: true, 
        data: [],
        message: 'Database connection not established'
      }, { status: 200 });
    }

    // Try to fetch test methods
    let testMethods = [];
    try {
      console.log('Test Methods API: Fetching test methods from database');
      
      // First try with population
      try {
        testMethods = await TestingMethod.find({})
          .populate({
            path: 'locationId',
            select: 'locationId sublocation contactPerson',
            options: { strictPopulate: false }
          })
          .populate({
            path: 'capabilityId',
            select: 'capabilityName shortName',
            options: { strictPopulate: false }
          })
          .sort({ methodCode: 1 })
          .lean() // Use lean() for better performance
          .exec();
        
        console.log('Test Methods API: Successfully fetched with population:', testMethods.length, 'methods');
      } catch (populateError) {
        console.warn('Test Methods API: Population failed, trying without populate:', populateError.message);
        
        // Fallback: fetch without population
        testMethods = await TestingMethod.find({})
          .sort({ methodCode: 1 })
          .lean()
          .exec();
        
        console.log('Test Methods API: Successfully fetched without population:', testMethods.length, 'methods');
      }

      // Ensure images object exists and handle legacy fields
      testMethods = testMethods.map(method => {
        // Ensure the images object exists
        if (!method.images) {
          method.images = { description: '', keyResult: '' };
        }

        // Handle legacy image fields
        if (method.descriptionImg && !method.images.description) {
          method.images.description = method.descriptionImg;
        }
        if (method.keyResultImg && !method.images.keyResult) {
          method.images.keyResult = method.keyResultImg;
        }

        // Ensure required fields have default values
        return {
          ...method,
          _id: method._id || '',
          methodCode: method.methodCode || '',
          methodName: method.methodName || '',
          description: method.description || '',
          price: method.price || 0,
          isActive: method.isActive !== undefined ? method.isActive : true,
          capabilityId: method.capabilityId || null,
          locationId: method.locationId || null,
          images: method.images,
          created: method.created || method.createdAt || new Date(),
          updated: method.updated || method.updatedAt || new Date()
        };
      });

      console.log('Test Methods API: Processed and returning', testMethods.length, 'test methods');
      
      return NextResponse.json({ 
        success: true, 
        data: testMethods,
        count: testMethods.length
      }, { status: 200 });

    } catch (fetchError) {
      console.error('Test Methods API: Error fetching test methods:', fetchError);
      
      // Return empty array instead of failing
      return NextResponse.json({ 
        success: true, 
        data: [],
        message: 'No test methods found or fetch error',
        error: fetchError.message
      }, { status: 200 });
    }

  } catch (error) {
    console.error('Test Methods API: Unexpected error:', error);
    
    // Always return a successful response with empty data to prevent infinite loops
    return NextResponse.json(
      { 
        success: true, 
        data: [],
        message: 'API error occurred, returning empty data',
        error: error.message
      },
      { status: 200 }
    );
  }
}

export async function POST(request) {
  try {
    console.log('Test Methods API: Starting POST request');
    
    // Connect to database
    await dbConnect();
    console.log('Test Methods API: Database connected for POST');

    const body = await request.json();
    console.log('Test Methods API: Received test method data:', {
      methodCode: body.methodCode,
      methodName: body.methodName,
      capabilityId: body.capabilityId
    });

    // Validate required fields
    if (!body.methodCode || !body.methodName) {
      return NextResponse.json(
        { 
          success: false, 
          error: 'Method code and method name are required' 
        },
        { status: 400 }
      );
    }

    // Ensure the images object exists
    if (!body.images) {
      body.images = { description: '', keyResult: '' };
    }

    // Handle legacy image fields
    if (body.descriptionImg && !body.images.description) {
      body.images.description = body.descriptionImg;
    }
    if (body.keyResultImg && !body.images.keyResult) {
      body.images.keyResult = body.keyResultImg;
    }

    // Handle empty capability field
    if (body.capabilityId === "" || body.capabilityId === "none") {
      body.capabilityId = null;
    }

    // Set default values
    const testMethodData = {
      ...body,
      price: body.price || 0,
      isActive: body.isActive !== undefined ? body.isActive : true,
      images: body.images
    };

    // Create the test method
    const testMethod = await TestingMethod.create(testMethodData);
    console.log('Test Methods API: Created test method:', testMethod.methodCode);

    return NextResponse.json({ 
      success: true, 
      data: testMethod 
    }, { status: 201 });

  } catch (error) {
    console.error('Test Methods API: Error creating test method:', error);

    // Handle validation errors
    if (error.name === 'ValidationError') {
      const validationErrors = Object.values(error.errors).map(err => err.message);
      return NextResponse.json(
        { 
          success: false, 
          error: 'Validation failed: ' + validationErrors.join(', ') 
        },
        { status: 400 }
      );
    }

    // Handle duplicate key errors
    if (error.code === 11000) {
      const field = Object.keys(error.keyPattern || {})[0] || 'field';
      return NextResponse.json(
        { 
          success: false, 
          error: `A test method with that ${field} already exists` 
        },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { 
        success: false, 
        error: 'Failed to create test method: ' + error.message 
      },
      { status: 500 }
    );
  }
}

export async function PUT(request) {
  try {
    console.log('Test Methods API: Starting PUT request');
    
    await dbConnect();
    
    const body = await request.json();
    const { id, ...updateData } = body;
    
    if (!id) {
      return NextResponse.json(
        { success: false, error: 'Test method ID is required' },
        { status: 400 }
      );
    }

    // Handle images
    if (!updateData.images) {
      updateData.images = { description: '', keyResult: '' };
    }

    // Handle legacy image fields
    if (updateData.descriptionImg && !updateData.images.description) {
      updateData.images.description = updateData.descriptionImg;
    }
    if (updateData.keyResultImg && !updateData.images.keyResult) {
      updateData.images.keyResult = updateData.keyResultImg;
    }

    // Handle empty capability field
    if (updateData.capabilityId === "" || updateData.capabilityId === "none") {
      updateData.capabilityId = null;
    }

    const updatedMethod = await TestingMethod.findByIdAndUpdate(
      id,
      { ...updateData, updated: new Date() },
      { new: true, runValidators: true }
    );

    if (!updatedMethod) {
      return NextResponse.json(
        { success: false, error: 'Test method not found' },
        { status: 404 }
      );
    }

    console.log('Test Methods API: Updated test method:', updatedMethod.methodCode);

    return NextResponse.json({ 
      success: true, 
      data: updatedMethod 
    }, { status: 200 });

  } catch (error) {
    console.error('Test Methods API: Error updating test method:', error);

    if (error.name === 'ValidationError') {
      const validationErrors = Object.values(error.errors).map(err => err.message);
      return NextResponse.json(
        { success: false, error: 'Validation failed: ' + validationErrors.join(', ') },
        { status: 400 }
      );
    }

    if (error.code === 11000) {
      const field = Object.keys(error.keyPattern || {})[0] || 'field';
      return NextResponse.json(
        { success: false, error: `A test method with that ${field} already exists` },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { success: false, error: 'Failed to update test method: ' + error.message },
      { status: 500 }
    );
  }
}

export async function DELETE(request) {
  try {
    console.log('Test Methods API: Starting DELETE request');
    
    await dbConnect();
    
    const { searchParams } = new URL(request.url);
    const id = searchParams.get('id');
    
    if (!id) {
      return NextResponse.json(
        { success: false, error: 'Test method ID is required' },
        { status: 400 }
      );
    }

    const deletedMethod = await TestingMethod.findByIdAndDelete(id);

    if (!deletedMethod) {
      return NextResponse.json(
        { success: false, error: 'Test method not found' },
        { status: 404 }
      );
    }

    console.log('Test Methods API: Deleted test method:', deletedMethod.methodCode);

    return NextResponse.json({ 
      success: true, 
      message: 'Test method deleted successfully',
      data: deletedMethod 
    }, { status: 200 });

  } catch (error) {
    console.error('Test Methods API: Error deleting test method:', error);
    
    return NextResponse.json(
      { success: false, error: 'Failed to delete test method: ' + error.message },
      { status: 500 }
    );
  }
}